import pymongo
from datetime import datetime
import logging
from mqtt.mqtt_config import MONGODB_URI, DATABASE_NAME, COLLECTION_NAME

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WhitelistDB:
    def __init__(self):
        """Kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB"""
        try:
            self.client = pymongo.MongoClient(MONGODB_URI)
            self.db = self.client[DATABASE_NAME]
            self.collection = self.db[COLLECTION_NAME]
            # Th√™m collection cho license plates
            self.license_plates_collection = self.db["license_plates"]
            # Th√™m collection cho theo d√µi xe v√†o/ra
            self.vehicle_tracking_collection = self.db["vehicle_tracking"]
            logger.info("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng")
            
            # T·∫°o sample data n·∫øu collection tr·ªëng
            self._init_sample_data()
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {e}")
            raise
    
    def _init_sample_data(self):
        """Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u cho whitelist"""
        if self.collection.count_documents({}) == 0:
            sample_cards = [
                {
                    "uid": "A1B2C3D4",
                    "name": "Nguy·ªÖn VƒÉn A",
                    "department": "IT",
                    "status": "active",
                    "created_at": datetime.now(),
                    "updated_at": datetime.now()
                },
                {
                    "uid": "E5F6G7H8",
                    "name": "Tr·∫ßn Th·ªã B", 
                    "department": "HR",
                    "status": "active",
                    "created_at": datetime.now(),
                    "updated_at": datetime.now()
                },
                {
                    "uid": "I9J0K1L2",
                    "name": "L√™ VƒÉn C",
                    "department": "Security",
                    "status": "active", 
                    "created_at": datetime.now(),
                    "updated_at": datetime.now()
                }
            ]
            
            self.collection.insert_many(sample_cards)
            logger.info(f"‚úÖ ƒê√£ th√™m {len(sample_cards)} th·∫ª m·∫´u v√†o whitelist")
    
    def check_uid_allowed(self, uid):
        """
        Ki·ªÉm tra UID c√≥ trong danh s√°ch cho ph√©p kh√¥ng
        
        Args:
            uid (str): UID c·ªßa th·∫ª RFID
            
        Returns:
            dict: Th√¥ng tin k·∫øt qu·∫£ ki·ªÉm tra
        """
        try:
            card = self.collection.find_one({
                "uid": uid,
                "status": "active"
            })
            
            if card:
                logger.info(f"‚úÖ UID {uid} ƒë∆∞·ª£c ph√©p truy c·∫≠p - {card['name']}")
                return {
                    "allowed": True,
                    "uid": uid,
                    "name": card["name"],
                    "department": card["department"],
                    "message": "Truy c·∫≠p ƒë∆∞·ª£c ph√©p"
                }
            else:
                logger.warning(f"‚ùå UID {uid} kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p")
                return {
                    "allowed": False,
                    "uid": uid,
                    "name": None,
                    "department": None,
                    "message": "Truy c·∫≠p b·ªã t·ª´ ch·ªëi"
                }
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói ki·ªÉm tra UID {uid}: {e}")
            return {
                "allowed": False,
                "uid": uid,
                "name": None,
                "department": None,
                "message": f"L·ªói h·ªá th·ªëng: {str(e)}"
            }
    
    def add_card(self, uid, name, department="Unknown"):
        """Th√™m th·∫ª m·ªõi v√†o whitelist"""
        try:
            card_data = {
                "uid": uid,
                "name": name,
                "department": department,
                "status": "active",
                "created_at": datetime.now(),
                "updated_at": datetime.now()
            }
            
            # Ki·ªÉm tra UID ƒë√£ t·ªìn t·∫°i ch∆∞a
            existing = self.collection.find_one({"uid": uid})
            if existing:
                logger.warning(f"‚ö†Ô∏è UID {uid} ƒë√£ t·ªìn t·∫°i")
                return False
            
            self.collection.insert_one(card_data)
            logger.info(f"‚úÖ ƒê√£ th√™m th·∫ª {uid} - {name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói th√™m th·∫ª {uid}: {e}")
            return False
    
    def remove_card(self, uid):
        """X√≥a th·∫ª kh·ªèi whitelist (soft delete)"""
        try:
            result = self.collection.update_one(
                {"uid": uid},
                {
                    "$set": {
                        "status": "inactive",
                        "updated_at": datetime.now()
                    }
                }
            )
            
            if result.modified_count > 0:
                logger.info(f"‚úÖ ƒê√£ v√¥ hi·ªáu h√≥a th·∫ª {uid}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th·∫ª {uid}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói x√≥a th·∫ª {uid}: {e}")
            return False
    
    def get_all_cards(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ th·∫ª active"""
        try:
            cards = list(self.collection.find({"status": "active"}))
            return cards
        except Exception as e:
            logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch th·∫ª: {e}")
            return []
    
    def log_access_attempt(self, uid, allowed, additional_info=None):
        """Ghi log l·∫°i vi·ªác truy c·∫≠p"""
        try:
            log_collection = self.db["access_logs"]
            log_data = {
                "uid": uid,
                "allowed": allowed,
                "timestamp": datetime.now(),
                "additional_info": additional_info or {}
            }
            
            log_collection.insert_one(log_data)
            logger.info(f"üìù ƒê√£ ghi log truy c·∫≠p: {uid} - {'Cho ph√©p' if allowed else 'T·ª´ ch·ªëi'}")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói ghi log: {e}")
    
    def save_license_plate(self, plate_text, image_path=None):
        """
        L∆∞u th√¥ng tin bi·ªÉn s·ªë xe v√†o database
        
        Args:
            plate_text (str): Text c·ªßa bi·ªÉn s·ªë xe
            image_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh (t√πy ch·ªçn)
            
        Returns:
            str: ID c·ªßa record ƒë∆∞·ª£c t·∫°o, ho·∫∑c None n·∫øu l·ªói
        """
        try:
            if not plate_text or not plate_text.strip():
                logger.warning("‚ö†Ô∏è Plate text tr·ªëng, kh√¥ng l∆∞u v√†o database")
                return None
                
            plate_data = {
                "plate": plate_text.strip(),
                "time_in": datetime.now(),
                "image_path": image_path,
                "created_at": datetime.now()
            }
            
            result = self.license_plates_collection.insert_one(plate_data)
            plate_id = str(result.inserted_id)
            
            logger.info(f"üíæ ƒê√£ l∆∞u bi·ªÉn s·ªë: {plate_text} v·ªõi ID: {plate_id}")
            return plate_id
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói l∆∞u bi·ªÉn s·ªë {plate_text}: {e}")
            return None
    
    def get_license_plates(self, limit=50):
        """
        L·∫•y danh s√°ch bi·ªÉn s·ªë xe ƒë√£ l∆∞u
        
        Args:
            limit (int): S·ªë l∆∞·ª£ng record t·ªëi ƒëa tr·∫£ v·ªÅ
            
        Returns:
            list: Danh s√°ch c√°c record bi·ªÉn s·ªë xe
        """
        try:
            plates = list(self.license_plates_collection.find()
                         .sort("time_in", -1)  # S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
                         .limit(limit))
            return plates
        except Exception as e:
            logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch bi·ªÉn s·ªë: {e}")
            return []
    
    def search_license_plate(self, plate_text):
        """
        T√¨m ki·∫øm bi·ªÉn s·ªë xe trong database
        
        Args:
            plate_text (str): Text bi·ªÉn s·ªë c·∫ßn t√¨m
            
        Returns:
            list: Danh s√°ch c√°c record matching
        """
        try:
            plates = list(self.license_plates_collection.find({
                "plate": {"$regex": plate_text, "$options": "i"}  # T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
            }).sort("time_in", -1))
            return plates
        except Exception as e:
            logger.error(f"‚ùå L·ªói t√¨m ki·∫øm bi·ªÉn s·ªë {plate_text}: {e}")
            return []

    # =============================================================================
    # VEHICLE TRACKING METHODS - Theo d√µi xe v√†o/ra
    # =============================================================================
    
    def vehicle_entry(self, uid, license_plate, image_path=None):
        """
        Ghi nh·∫≠n xe v√†o b√£i
        
        Args:
            uid (str): UID c·ªßa th·∫ª RFID
            license_plate (str): Bi·ªÉn s·ªë xe ƒë√£ tr√≠ch xu·∫•t
            image_path (str): ƒê∆∞·ªùng d·∫´n ·∫£nh ch·ª•p
            
        Returns:
            dict: K·∫øt qu·∫£ ghi nh·∫≠n
        """
        try:
            # Ki·ªÉm tra xe ƒë√£ c√≥ trong b√£i ch∆∞a
            existing_entry = self.vehicle_tracking_collection.find_one({
                "uid": uid,
                "status": "inside",
                "exit_time": None
            })
            
            if existing_entry:
                logger.warning(f"‚ö†Ô∏è Xe v·ªõi UID {uid} ƒë√£ c√≥ trong b√£i")
                return {
                    "success": False,
                    "message": f"Xe ƒë√£ c√≥ trong b√£i t·ª´ {existing_entry['entry_time']}",
                    "existing_plate": existing_entry.get("license_plate")
                }
            
            # T·∫°o record m·ªõi cho xe v√†o
            entry_data = {
                "uid": uid,
                "license_plate": license_plate,
                "entry_time": datetime.now(),
                "entry_image": image_path,
                "status": "inside",
                "exit_time": None,
                "exit_image": None,
                "exit_license_plate": None,
                "match_status": None,
                "created_at": datetime.now()
            }
            
            result = self.vehicle_tracking_collection.insert_one(entry_data)
            entry_id = str(result.inserted_id)
            
            logger.info(f"üöó‚û°Ô∏è Xe v√†o: UID {uid}, Bi·ªÉn s·ªë {license_plate}")
            
            return {
                "success": True,
                "message": f"Xe v√†o th√†nh c√¥ng - Bi·ªÉn s·ªë: {license_plate}",
                "entry_id": entry_id,
                "license_plate": license_plate
            }
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói ghi nh·∫≠n xe v√†o {uid}: {e}")
            return {
                "success": False,
                "message": f"L·ªói h·ªá th·ªëng: {str(e)}"
            }
    
    def vehicle_exit(self, uid, license_plate, image_path=None):
        """
        Ghi nh·∫≠n xe ra kh·ªèi b√£i v√† ki·ªÉm tra kh·ªõp bi·ªÉn s·ªë
        
        Args:
            uid (str): UID c·ªßa th·∫ª RFID
            license_plate (str): Bi·ªÉn s·ªë xe ƒë√£ tr√≠ch xu·∫•t khi ra
            image_path (str): ƒê∆∞·ªùng d·∫´n ·∫£nh ch·ª•p khi ra
            
        Returns:
            dict: K·∫øt qu·∫£ ghi nh·∫≠n v√† ki·ªÉm tra
        """
        try:
            # T√¨m record xe v√†o t∆∞∆°ng ·ª©ng
            entry_record = self.vehicle_tracking_collection.find_one({
                "uid": uid,
                "status": "inside",
                "exit_time": None
            })
            
            if not entry_record:
                logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y xe v·ªõi UID {uid} trong b√£i")
                return {
                    "success": False,
                    "message": f"Xe v·ªõi UID {uid} kh√¥ng c√≥ trong b√£i",
                    "match_status": "no_entry_record"
                }
            
            entry_plate = entry_record.get("license_plate", "")
            
            # So s√°nh bi·ªÉn s·ªë v√†o v√† ra
            plates_match = self._compare_license_plates(entry_plate, license_plate)
            
            # C·∫≠p nh·∫≠t record v·ªõi th√¥ng tin xe ra
            update_data = {
                "exit_time": datetime.now(),
                "exit_image": image_path,
                "exit_license_plate": license_plate,
                "status": "completed",
                "match_status": "match" if plates_match else "mismatch",
                "updated_at": datetime.now()
            }
            
            self.vehicle_tracking_collection.update_one(
                {"_id": entry_record["_id"]},
                {"$set": update_data}
            )
            
            result_message = f"Xe ra th√†nh c√¥ng - UID: {uid}"
            if plates_match:
                result_message += f"\n‚úÖ Bi·ªÉn s·ªë kh·ªõp: {entry_plate}"
                logger.info(f"üöó‚¨ÖÔ∏è‚úÖ Xe ra kh·ªõp bi·ªÉn s·ªë: UID {uid}, {entry_plate} = {license_plate}")
            else:
                result_message += f"\n‚ùå Bi·ªÉn s·ªë KH√îNG kh·ªõp!\nV√†o: {entry_plate}\nRa: {license_plate}"
                logger.warning(f"üöó‚¨ÖÔ∏è‚ùå Xe ra KH√îNG kh·ªõp bi·ªÉn s·ªë: UID {uid}, {entry_plate} ‚â† {license_plate}")
            
            return {
                "success": True,
                "message": result_message,
                "match_status": "match" if plates_match else "mismatch",
                "entry_plate": entry_plate,
                "exit_plate": license_plate,
                "entry_time": entry_record["entry_time"],
                "exit_time": update_data["exit_time"]
            }
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói ghi nh·∫≠n xe ra {uid}: {e}")
            return {
                "success": False,
                "message": f"L·ªói h·ªá th·ªëng: {str(e)}"
            }
    
    def _compare_license_plates(self, plate1, plate2):
        """
        So s√°nh 2 bi·ªÉn s·ªë xe (cho ph√©p sai kh√°c nh·ªè do OCR)
        
        Args:
            plate1 (str): Bi·ªÉn s·ªë th·ª© nh·∫•t
            plate2 (str): Bi·ªÉn s·ªë th·ª© hai
            
        Returns:
            bool: True n·∫øu bi·ªÉn s·ªë kh·ªõp (ho·∫∑c g·∫ßn kh·ªõp)
        """
        if not plate1 or not plate2:
            return False
        
        # Chu·∫©n h√≥a bi·ªÉn s·ªë (b·ªè kho·∫£ng tr·∫Øng, chuy·ªÉn v·ªÅ ch·ªØ hoa)
        clean_plate1 = ''.join(plate1.upper().split())
        clean_plate2 = ''.join(plate2.upper().split())
        
        # Ki·ªÉm tra kh·ªõp ho√†n to√†n
        if clean_plate1 == clean_plate2:
            return True
        
        # Ki·ªÉm tra ƒë·ªô t∆∞∆°ng t·ª± (cho ph√©p 1-2 k√Ω t·ª± sai kh√°c do OCR)
        if len(clean_plate1) == len(clean_plate2):
            diff_count = sum(c1 != c2 for c1, c2 in zip(clean_plate1, clean_plate2))
            # Cho ph√©p t·ªëi ƒëa 2 k√Ω t·ª± kh√°c nhau (c√≥ th·ªÉ do l·ªói OCR)
            return diff_count <= 2
        
        return False
    
    def get_vehicles_in_parking(self):
        """
        L·∫•y danh s√°ch xe hi·ªán ƒëang trong b√£i
        
        Returns:
            list: Danh s√°ch xe trong b√£i
        """
        try:
            vehicles = list(self.vehicle_tracking_collection.find({
                "status": "inside",
                "exit_time": None
            }).sort("entry_time", -1))
            
            return vehicles
        except Exception as e:
            logger.error(f"‚ùå L·ªói l·∫•y danh s√°ch xe trong b√£i: {e}")
            return []
    
    def get_vehicle_history(self, uid=None, limit=50):
        """
        L·∫•y l·ªãch s·ª≠ ra v√†o c·ªßa xe
        
        Args:
            uid (str): UID c·ª• th·ªÉ (None ƒë·ªÉ l·∫•y t·∫•t c·∫£)
            limit (int): S·ªë l∆∞·ª£ng record t·ªëi ƒëa
            
        Returns:
            list: L·ªãch s·ª≠ ra v√†o
        """
        try:
            query = {}
            if uid:
                query["uid"] = uid
            
            history = list(self.vehicle_tracking_collection.find(query)
                          .sort("entry_time", -1)
                          .limit(limit))
            
            return history
        except Exception as e:
            logger.error(f"‚ùå L·ªói l·∫•y l·ªãch s·ª≠ xe: {e}")
            return []
    
    def get_mismatch_reports(self, limit=20):
        """
        L·∫•y danh s√°ch c√°c tr∆∞·ªùng h·ª£p bi·ªÉn s·ªë kh√¥ng kh·ªõp
        
        Args:
            limit (int): S·ªë l∆∞·ª£ng record t·ªëi ƒëa
            
        Returns:
            list: Danh s√°ch c√°c tr∆∞·ªùng h·ª£p kh√¥ng kh·ªõp
        """
        try:
            mismatches = list(self.vehicle_tracking_collection.find({
                "match_status": "mismatch"
            }).sort("exit_time", -1).limit(limit))
            
            return mismatches
        except Exception as e:
            logger.error(f"‚ùå L·ªói l·∫•y b√°o c√°o kh√¥ng kh·ªõp: {e}")
            return []

# Test functions
if __name__ == "__main__":
    print("üß™ Testing WhitelistDB...")
    
    try:
        db = WhitelistDB()
        
        # Test check existing UID
        result = db.check_uid_allowed("A1B2C3D4")
        print(f"Test UID A1B2C3D4: {result}")
        
        # Test check non-existing UID
        result = db.check_uid_allowed("XXXXXXXX")
        print(f"Test UID XXXXXXXX: {result}")
        
        # Test get all cards
        cards = db.get_all_cards()
        print(f"T·ªïng s·ªë th·∫ª active: {len(cards)}")
        
        # Test vehicle entry
        print("\nüöó Testing vehicle tracking...")
        entry_result = db.vehicle_entry("A1B2C3D4", "30A-12345", "/path/to/entry_image.jpg")
        print(f"Vehicle entry: {entry_result}")
        
        # Test vehicle exit with matching plate
        exit_result = db.vehicle_exit("A1B2C3D4", "30A-12345", "/path/to/exit_image.jpg")
        print(f"Vehicle exit (match): {exit_result}")
        
        # Test vehicle entry again
        entry_result2 = db.vehicle_entry("A1B2C3D4", "30A-67890", "/path/to/entry_image2.jpg")
        print(f"Vehicle entry 2: {entry_result2}")
        
        # Test vehicle exit with non-matching plate
        exit_result2 = db.vehicle_exit("A1B2C3D4", "30A-99999", "/path/to/exit_image2.jpg")
        print(f"Vehicle exit (mismatch): {exit_result2}")
        
        print("‚úÖ Test ho√†n th√†nh!")
        
    except Exception as e:
        print(f"‚ùå L·ªói test: {e}")
