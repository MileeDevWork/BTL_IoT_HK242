#!/usr/bin/env python3
"""
Demo MQTT Client ƒë·ªÉ test h·ªá th·ªëng RFID
G·ª≠i UID RFID ƒë·∫øn MQTT broker v√† nh·∫≠n ph·∫£n h·ªìi
"""

import paho.mqtt.client as mqtt
import json
import time
import threading
from datetime import datetime
from mqtt_config import MQTT_BROKER, MQTT_PORT, TOPIC_SUB, TOPIC_PUB

class RFIDMQTTDemo:
    def __init__(self):
        """Kh·ªüi t·∫°o demo client"""
        self.client = mqtt.Client()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.on_disconnect = self.on_disconnect
        
        self.responses = []
        self.connected = False
        
        print("üß™ RFID MQTT Demo Client")
        print("=" * 40)
    
    def on_connect(self, client, userdata, flags, rc):
        """Callback khi k·∫øt n·ªëi th√†nh c√¥ng"""
        if rc == 0:
            self.connected = True
            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi MQTT Broker: {MQTT_BROKER}:{MQTT_PORT}")
            
            # Subscribe ƒë·ªÉ nh·∫≠n response
            client.subscribe(TOPIC_PUB)
            print(f"üì° ƒê√£ subscribe topic response: {TOPIC_PUB}")
        else:
            print(f"‚ùå L·ªói k·∫øt n·ªëi MQTT. Code: {rc}")
    
    def on_disconnect(self, client, userdata, rc):
        """Callback khi m·∫•t k·∫øt n·ªëi"""
        self.connected = False
        print(f"‚ö†Ô∏è M·∫•t k·∫øt n·ªëi MQTT. Code: {rc}")
    
    def on_message(self, client, userdata, msg):
        """Callback nh·∫≠n response t·ª´ server"""
        try:
            message = msg.payload.decode('utf-8')
            print(f"\nüì® Nh·∫≠n response t·ª´ {msg.topic}:")
            
            # Parse JSON response
            try:
                response = json.loads(message)
                
                status = "‚úÖ CHO PH√âP" if response.get("allowed") else "‚ùå T·ª™ CH·ªêI"
                print(f"   {status}")
                print(f"   UID: {response.get('uid', 'N/A')}")
                print(f"   T√™n: {response.get('name', 'N/A')}")
                print(f"   Ph√≤ng ban: {response.get('department', 'N/A')}")
                print(f"   Th√¥ng b√°o: {response.get('message', 'N/A')}")
                print(f"   Th·ªùi gian: {response.get('timestamp', 'N/A')}")
                
                self.responses.append(response)
                
            except json.JSONDecodeError:
                print(f"   Raw message: {message}")
                
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω response: {e}")
    
    def connect(self):
        """K·∫øt n·ªëi t·ªõi MQTT broker"""
        try:
            print(f"üîÑ ƒêang k·∫øt n·ªëi t·ªõi {MQTT_BROKER}:{MQTT_PORT}...")
            self.client.connect(MQTT_BROKER, MQTT_PORT, 60)
            self.client.loop_start()
            
            # Ch·ªù k·∫øt n·ªëi
            timeout = 10
            while not self.connected and timeout > 0:
                time.sleep(0.5)
                timeout -= 0.5
            
            if not self.connected:
                raise Exception("Timeout k·∫øt n·ªëi")
                
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def send_rfid_scan(self, uid, device_id="DEMO_DEVICE"):
        """G·ª≠i UID RFID ƒë·∫øn server"""
        if not self.connected:
            print("‚ùå Ch∆∞a k·∫øt n·ªëi MQTT broker")
            return False
        
        try:
            # T·∫°o message
            message = {
                "uid": uid,
                "device_id": device_id,
                "timestamp": datetime.now().isoformat()
            }
            
            message_json = json.dumps(message, ensure_ascii=False)
            
            # G·ª≠i message
            result = self.client.publish(TOPIC_SUB, message_json)
            
            if result.rc == mqtt.MQTT_ERR_SUCCESS:
                print(f"üì§ ƒê√£ g·ª≠i UID: {uid}")
                return True
            else:
                print(f"‚ùå L·ªói g·ª≠i message. Code: {result.rc}")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói g·ª≠i RFID scan: {e}")
            return False
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi"""
        try:
            self.client.loop_stop()
            self.client.disconnect()
            print("‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi")
        except Exception as e:
            print(f"‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi: {e}")
    
    def demo_sequence(self):
        """Ch·∫°y demo v·ªõi c√°c UID m·∫´u"""
        test_uids = [
            "A1B2C3D4",  # UID h·ª£p l·ªá trong whitelist
            "E5F6G7H8",  # UID h·ª£p l·ªá trong whitelist  
            "I9J0K1L2",  # UID h·ª£p l·ªá trong whitelist
            "XXXXXXXX",  # UID kh√¥ng h·ª£p l·ªá
            "12345678",  # UID kh√¥ng t·ªìn t·∫°i
        ]
        
        print("\nüéØ B·∫Øt ƒë·∫ßu demo sequence...")
        print("=" * 50)
        
        for i, uid in enumerate(test_uids, 1):
            print(f"\nüß™ Test {i}/{len(test_uids)}: G·ª≠i UID {uid}")
            print("-" * 30)
            
            success = self.send_rfid_scan(uid)
            if success:
                # Ch·ªù response
                time.sleep(2)
            else:
                print("‚ùå Kh√¥ng th·ªÉ g·ª≠i UID")
            
            # Ngh·ªâ gi·ªØa c√°c test
            if i < len(test_uids):
                time.sleep(1)
        
        print(f"\n‚úÖ Demo ho√†n th√†nh! Nh·∫≠n ƒë∆∞·ª£c {len(self.responses)} response(s)")

def interactive_mode():
    """Ch·∫ø ƒë·ªô interactive cho ph√©p nh·∫≠p UID th·ªß c√¥ng"""
    demo = RFIDMQTTDemo()
    
    if not demo.connect():
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MQTT broker!")
        return
    
    print("\nüéÆ CHMODE INTERACTIVE")
    print("=" * 30)
    print("Nh·∫≠p UID ƒë·ªÉ test, ho·∫∑c 'quit' ƒë·ªÉ tho√°t")
    print("C√°c UID m·∫´u: A1B2C3D4, E5F6G7H8, I9J0K1L2")
    
    try:
        while True:
            uid = input("\nüëâ Nh·∫≠p UID: ").strip()
            
            if uid.lower() in ['quit', 'exit', 'q']:
                break
            
            if not uid:
                print("‚ö†Ô∏è UID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
                continue
            
            print(f"üì§ ƒêang g·ª≠i UID: {uid}")
            demo.send_rfid_scan(uid)
            
            # Ch·ªù response
            time.sleep(1.5)
    
    except KeyboardInterrupt:
        print("\nüõë ƒê√£ d·ª´ng interactive mode")
    
    finally:
        demo.disconnect()

def main():
    """Main function"""
    print("üß™ RFID MQTT Demo Tool")
    print("=" * 40)
    print("1. üéØ Ch·∫°y demo sequence")
    print("2. üéÆ Ch·∫ø ƒë·ªô interactive")
    print("3. üö™ Tho√°t")
    
    while True:
        try:
            choice = input("\nüëâ Ch·ªçn ch·∫ø ƒë·ªô (1-3): ").strip()
            
            if choice == "1":
                demo = RFIDMQTTDemo()
                if demo.connect():
                    demo.demo_sequence()
                    demo.disconnect()
                break
                
            elif choice == "2":
                interactive_mode()
                break
                
            elif choice == "3":
                print("üëã T·∫°m bi·ªát!")
                break
                
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                
        except KeyboardInterrupt:
            print("\nüõë ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")
            break

if __name__ == "__main__":
    main()
